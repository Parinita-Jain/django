PS C:\Users\itvedant\Documents\Django> pip  install virtualenv

2.-- create virtual envir--

virtualenv environmentname
or
python -m virtualenv environmentname

PS C:\Users\itvedant\Documents\Django> virtualenv env

PS C:\Users\itvedant\Documents\Django> env\Scripts\activate

(env) PS C:\Users\itvedant\Documents\Django> pip install django

(env) PS C:\Users\itvedant\Documents\Django> pip freeze

next,create project using django--

django-admin startproject projectname

e.g. 
(env) C:\Users\itvedant\Documents\DA>django-admin startproject todo

manage.py is the starting point of project.

In order to create application, we require the help of manage.py

Next is, creating application. So cmd is--


todoapp is the appname

to access this file, as its inside todo folder--
(env) PS C:\Users\itvedant\Documents\Django> cd todo

(env) C:\Users\itvedant\Documents\DA\todo>python manage.py startapp todoapp


Now this todoapp folder is created by python and it has 
various files installed inside it.

running server--
file for running the server is manage.py

python manage.py runserver

ctrl+c for quitting

when you first start server, it executes settings.py file 
in the django project.

django architecture is based on mvt pattern.
M-model, v-view,t-template
model is like database table.
view contains business logicfor applicaton.

2 types ofviews are-- fuc based views, 
and class based views. func is procedure oriened
and class is object oriented. 

templates are html files. 
templates folder we need to create.


req-responce cycle--

now we are using the server provided by django.
req is the url in the addr bar of browser to django server.

once the django server gets the req,it goes for url mapping 
in urls.py file.

if it is mapped then it proceeds further otherwise it goes into 
not found error to client. We needto create urls.py file.

in todo folder we have urls.py file but in app folder we dont have.

copy following from urls.py file of todo folder to urls.py todoapp folder.

we dont wantadmin--

from django.urls import path

urlpatterns = [
    
]

this urlpatterns is a list of urls for the application. 
there is a path function, its syntax :
path('urls',views.functionname,[name=urlname])
urls - is the url to be mapped.i.e.url mapping by django server
url from the client=url in the path function.


from django.urls import path

from todoapp import views

urlpatterns = [
    path("home",views.index)
]

eg - 
if client requests http://127.0.0.1:8000/contact-- to django server
then ,django server will look into urls.py file.And in the urls.py
file, it tries to match contact=path("contact").
if matched, then it will call respective func in views.py file.
and that func which is called, will give the response to the client.

and if not matched, then too response will be given Not Found.

Now,before defining url, we need to define views.

Request Response Flow--

So, everytime if you close vscode, then do--
PS C:\Users\itvedant\Documents\Django> env\Scripts\activate

(env) PS C:\Users\itvedant\Documents\Django> cd todo

(env) C:\Users\itvedant\Documents\Django\todo>python manage.py runserver

now, urls are going to be matched with the url in the views.py

So inside todoapp/views.py----

from django.shortcuts import render

# Create your views here.
def index(request):
    return "Hello from index"

now this function is called by whatever url written in urls.py file.

-------------- inside urls.py file-----todoapp
from django.urls import path

from todoapp import views

urlpatterns = [
    path("home",views.index)
]

now,module is just a python file, or it could be a file in  package.

now, request from browser is given to django server-- http://127.0.0.1:8000/home

Now,open todo folder urls.py file---todo---

from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include("todoapp.urls"))
]


now goto browser and refresh.
Now we are getting error because it is unable to return the string.It requires response object.

So, we will require response object in views.py

from django.shortcuts import render

# Create your views here.

def index(request):
    return "Hello from index"

the return stmt returns response object.response obj is created by using--
1>HttpResponse()--it is an obj of httpresponse class
2>render()

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def index(request):
    return HttpResponse("<b>Hello from index</b>")


now make changes-- views.py-----


from django.shortcuts import render

from django.http import HttpResponse

# Create your views here.
def index(request):
    return HttpResponse("<b>Hello from index</b>")

def edit(request):
    str1="Hello from edit function "
    return HttpResponse(str1)


inside todoapp--urls.py


from django.urls import path

from todoapp import views

urlpatterns = [
    path("home",views.index),
    path("edit",views.edit),
]



Now, create a new folder inside outer todo folder templates

inside it create a new file-- index.html


now,passing parameters through urls--

http://127.0.0.1:8000/edit/3

for receiving parameters through urls--

path('url/<var>',views.functionname)

views.py changes-----

from django.shortcuts import render,redirect

from django.http import HttpResponse

# Create your views here.
def index(request):
    #return HttpResponse("<b>Hello from index</b>")
    return redirect("/index")

def edit(request,rid):
    #str1="Hello from edit function "
    print(rid)
    return HttpResponse("ID to be edited"+rid)

def delete(request,rid):
    print("ID to be deleted : "+rid)
    return HttpResponse("ID to be edited"+rid)

def home(request):
    return render(request,"index.html")


--todoapp/urls.py-----


from django.urls import path

from todoapp import views

urlpatterns = [
    path("home",views.index),
    path("edit/<rid>",views.edit),
    path("delete/<rid>",views.delete),
    path("index",views.home),
]


Now create a folder--- templates----index.html--- doc is a shortcut,
type it and press enter ,you will get the document. 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <h1>Dashboard</h1>   
    
</body>
</html>

Now goto settings.py---

"""
Django settings for todo project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os-----------------------------------------------------------------------------------------------changes

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8b-)jt^ayir2uyvy4vo%buxruwav)p&4b9=ll_6c0g7dx8hftj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'todo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")], ---------------------------------------changes
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#--------------------------------------------------------------------------------------------------------

--redirect from 1 url to another--

redirect("/url_name") 

--return stmt returns response object

HttpResponse()-- it is  used to create response object and that object is returned to the client.

--variables--

values stored in variables in views.py file.
values passed to the templates [html] is in the form of dictionary.

values from the key are extracted in the templates shown as follows--
syntax--
{{variable}}-- but variable is nothing but key.So,{{key}} 

render()-- this func can return html file as a response to the browser

render(request,"html.file",data)


-----views.py---- def home changes----

def home(request):
    content={}
    content["x"]="Itvedant"
    content["y"]=100
    return render(request,"index.html",content)

so we are passing this dictionary to index.html -----

<body>

    <h1>Dashboard</h1>   
    <h2>{{x}}</h2>
    <h3>{{y}}</h3>
    
</body>


#--------------- decision control instructions----------- if else

{% if condition %}
 body of if
{% endif %}

2.. if else

{% if condition %}
  body
{% else %}
  else body
{% endif %}

-----views.py---- def home changes----

def home(request):
    content={}
    content["x"]=500
    content["y"]=100
    return render(request,"index.html",content)

------index.py------

<body>

    <h1>Dashboard</h1>   
    x=<h2>{{x}}</h2>
    y=<h3>{{y}}</h3>

    {% if x > y %}
      <i>{{x}} is greater</i>
    {% else %}
      <i>{{y}} is greater</i>
    {% endif%}
    
</body>

---------------- looping-----


{% for var in datastructure %}
   body need to be repeated
{% endfor %}

---------views.py------


def home(request):
    content={}
    #content["x"]="Itvedant"
    #content["x"]=500
    #content["y"]=100
    content["data"]=[10,20,30,40,50,60]
    return render(request,"index.html",content)

--------- index.html---


<body>
<!---
    <h1>Dashboard</h1>   
    x=<h2>{{x}}</h2>
    y=<h3>{{y}}</h3>

    {% if x > y %}
      <i>{{x}} is greater</i>
    {% else %}
      <i>{{y}} is greater</i>
    {% endif%}
---->  
    <h2>Display using loop </h2>
    {% for x in data %}
       <p>{{x}}</p>
    {% endfor %} 
</body>

DTL Comment--------------------------------------------------------

{ % content % }
    comment body
{ % endcontent % }

or,

<!---comment body---->

Now,lets say there are 2 pages in our website.

Reusability---- importing 1 html file into other.
so inside templates-------------create contact.html---------and product.html--

1st contact.html---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itvedant</title>
</head>
<body>
   <h1>Header Section</h1>
   <h1>Main contact page content</h1> 
   <h1>footer section</h1>
   
</body>
</html>

2nd product.html---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itvedant</title>
</head>
<body>
    <h1>header section containing menu</h1>
    <h1>main product page content</h1>
    <h1>footer section</h1>
</body>
</html>

Creating route for these pages. todoapp/urls.py

from django.urls import path

from todoapp import views

urlpatterns = [
    path("home",views.index),
    path("edit/<rid>",views.edit),
    path("delete/<rid>",views.delete),
    path("index",views.home),
    path("contact",views.contact),
    path("product",views.product),
]

Now,creating route for these in views.py


def contact(request):
    return render(request,"contact.html")


def product(request):
    return render(request,"product.html")

#-------------- now creating header.html, footer.html--------

----now for redirection--- in contact.html-----

<h1>Main contact page content</h1> 

-----in product.html-----

<h1>Main product page content</h1>

-----header.html----------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itvedant</title>
</head>
<body>
    <h1>header section containing menu</h1>


------footer.html----------

<h1>footer section</h1>
</body>
</html>

now, in product.html--------

{% include "header.html" %}
<h1>main product page content</h1>
{% include "footer.html" %}

now, in contact.html---------

{% include "header.html" %}
<h1>main contact page content</h1>
{% include "footer.html" %}

so, id is passed through url to perform any action.

let's say we are passing id to edit and delete function.

#-------------------------------------------------------------------

Static files means your css file, js file and we need tolink them properly
and for that we need to create static folder.

so,static files configuration--

1.linking external css, 2.linking external js,
3.linking images,4.linking bootstrap offline

1. create static folder in the root todo folder
2. create css,js, and image folder inside static folder

Next is to edit settings.py file

then link static folder just like templates folder in settings.py

So,open settings.py----- on scrolling down there is a static area.

STATIC_URL = 'static/'
STATICFILES_DIRS=[os.path.join(BASE_DIR,"static")
                  ]


Now, first create a css file then jsthen images then we will have linking bootstrap.
 we are going apply css on product and link that with header.

when we are running product.html,  it has no colour. So in css we are going to apply
color on h1 of product.html

So,inside css folder create a file and name this folder as style.css

h1{
    color: blue;
}

but now we need to link this file in head part of header.html.

so,in header.html , head part type link and press enter.

in href we give relative path.

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itvedant</title>
    <link rel="stylesheet" href="{% static 'css/style.css'%}">
</head>

Now, in header.html we have h1 tag and and also in footer and in css file,
we have declared that h1 is blue in color.

but when we refresh in browser,we got error. Here, we need to load static better.

So, in header.html write--

{% load static %}--- like---


{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itvedant</title>
    <link rel="stylesheet" href="{% static 'css/style.css'%}">
</head>
<body>
    <h1>header section containing menu</h1>


create base.html in templates folder---

{% include 'header.html' %}

{% block 'main' %}

{% endblock 'main' %}

{% include 'footer.html' %}


Now, in contact.html we have---


{% include "header.html" %}
<h1>main contact page content</h1>
{% include "footer.html" %}

here, base is there that means header is there and they
will be linked properly.

lly, create css file,js file in the respective folder.

Now,lets say I want to create buttons.So, in product.html--

unclick is an event. and func is greet(). 

Now, inside js folder creating a file main.js

function greet(){
    alert("Javascript file is linked properly");
}

Now inside footer.html--------


{% load static %}

<h1>footer section</h1>
<script src="{% static 'js/main.js' %}"></script>
</body>
</html>

now, inside images folder we will put images---- lets say some mvt image.

alt is alternate text.

always load static below extends.

product.html-----------

{% extends "base.html" %}
{% load static %}
{% block 'main' %}
    <h1>main product page content</h1>
    <img src="{% static 'images/mvt.png' %}">
    <button unclick="greet()">Click me</button>
{% endblock 'main' %}


#------------------------------------------------------10/16/23---

product.html-------------------

{% extends "base.html" %}
{% load static %}
{% block 'main' %}
    <h1>main product page content</h1>
    <img src="{% static 'images/mvt.png' %}" alt="" width="100" height="100">
    <button unclick="greet()">Click me</button>
{% endblock 'main' %}

or in style.css--

img{

    width: 100px;
    height: 100px;
}

and try removing  width="100" height="100" fromproduct.html.

Now, we will see how we can link bootstrap.

write bootstrap download on browser. bootstrap v5----

download the zip file from compiled css and js. Create a new folder bootstrap and save it there.

we are downloading it so that we can have bootstrap even without internet.

now,inside bootstrap folder there is css and js folder.Inside css,there are many bootstrap files.

bootstrap.min css file we need.
Copy this and paste it in our css folder.

Same thing we will do for js folder.

bootstrap.min js file paste it in our folder.

now through vs code we need tolink them properly. header.html---

{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itvedant</title>
    <link rel="stylesheet" href="{% static 'css/style.css'%}">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css'%}">--------------------------
</head>
<body>
    <h1>header section containing menu</h1>

and in the footer.html----

Now just refresh browser.Bootstrap is applied.

go to browser--- bootstrap page--- layout section--- containers----

from header.html remove <h1>header section containing menu</h1> and create a div tag.

{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itvedant</title>
    <link rel="stylesheet" href="{% static 'css/style.css'%}">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css'%}">
</head>
<body>
    <div class="container">
        <div class="row">

now,we will not close this div in header but in footer.

So, from footer remove <h1>footer section</h1> and write---

{% load static %}

    </div> -----------------------row closed
</div> ---------------------------container closed
<script src="{% static 'js/main.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js'%}"></script>
</body>
</html>

with the hellp of base.html, header and footer are getting combined.

product display page where product will be added by admin and they will be reflected at the user dashboard
when the user logs in.
we will be having details of the product,name , description and price of product and image will be constant.

so,product mgmt system and display of the product on dashboard we will do.

Product Mgmt System---

Rights-- product addition rights are given to admin.

UI for our Dashboard********************************************************

prod addition form will be lik----
-----------------------------------------------------------------
prod name-________________
prod desc-________________
prod pric-________________
category -________________

add product

-----------------------------------------------------------------

prod details to be viewed----
-----------------------------------------------------------------
prod name, description,category,price,edit,delete

So, inside templates folder,create product_dashboard.html----------------------------

here we require base template to be extended.

{% extends 'base.html' %}
{% block 'main' %}

{% endblock 'main' %}

now, writing a view for this.--- todoapp--views.py

def dash_product(request):
    return render(request,"product_dashboard.html")

now, going to urls.py------


from django.urls import path

from todoapp import views

urlpatterns = [
    path("home",views.index),
    path("edit/<rid>",views.edit),
    path("delete/<rid>",views.delete),
    path("index",views.home),
    path("contact",views.contact),
    path("product",views.product),
    path("pdashboard",views.dash_product),
]


Now, goto browser and write-- 127.0.0.1:8000/pdashboard

do right click.... see page source.... u will get the code.

now, go to product_dashboard.html----

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-3"> --------------- margin bottom


</div>

<div class="col-md-9">


</div>

{% endblock 'main' %}

by this we are dividing the entire page into col d3 and col d9.

now,moving to bootstrap in browser---

go into simple form controls. copy first code-- and paste it in col-md-3 
and align it properly.

now, if we go and refresh 127.0.0.1:8000/pdashboard
we will see the form.

now, the label is connected with the textbox because of that for and id.
So changing for and id. As they are the place holders.

<div class="col-md-3 mt-5">
    <div class="mb-3">
        <label for="pname" class="form-label">Product name</label>
        <input type="text" class="form-control" id="pname" placeholder="Enter product name">----- with changes.


now go and refresh dashboard. Next what we want is product description.

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-3 mt-5">
    <div class="mb-3">
        <label for="pname" class="form-label">Product name</label>
        <input type="text" class="form-control" id="pname" placeholder="Enter product name">
    </div>
    <div class="mb-3">
        <label for="pdesc" class="form-label">Product description</label>
        <textarea class="form-control" id="pdesc" rows="3"></textarea>
    </div>
    <div class="mb-3">
        <label for="pprice" class="form-label">Product price</label>
        <input type="number" class="form-control" id="pprice" placeholder="Enter product price">
    </div>


</div>

Now for category we can give a dropdown. Now in the bootsrap site only, u will get an option 
for select.

Add this inside above code.

<div class="mb-3">
        <select class="form-select" name="cat" aria-label="Default select example">
            <option selected>Open this select menu</option>
            <option value="1">Electronics</option>
            <option value="2">Groceries</option>
            <option value="3">Clothes</option>
        </select>
</div>

whatever value we will select, name variable will be assigned to that.

now make another div.class.mb-3 tag and from bootstrap, under components see buttons code.

<div class="class mb-3">
    <button class="btn btn-primary" type="submit">Add product</button>
</div>

Save and refresh browser.

we can give some heading also. 

<h4>Enter product details</h4>

and we can get a line under heading by <hr> tag.
    <hr>

Now put this entire code inside <form action=""></form>.put <form> below <hr> --- so we have--

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-3 mt-5">
    <h4>Enter product details</h4>
    <hr>
    <form action="">

        <div class="mb-3">
            <label for="pname" class="form-label">Product name</label>
            <input type="text" class="form-control" id="pname" name="pname" placeholder="Enter product name">
        </div>
        <div class="mb-3">
            <label for="pdesc" class="form-label">Product description</label>
            <textarea class="form-control" id="pdesc" name="pdesc" rows="3"></textarea>
        </div>
        <div class="mb-3">
            <label for="pprice" class="form-label">Product price</label>
            <input type="number" class="form-control" id="pprice" name="pprice" placeholder="Enter product price">
        </div>
        <div class="mb-3">
            <select class="form-select" name="cat" aria-label="Default select example">
                <option selected>Open this select menu</option>
                <option value="E">Electronics</option>
                <option value="G">Groceries</option>
                <option value="C">Clothes</option>
            </select>
        </div>
        <div class="class mb-3">
            <button class="btn btn-primary" type="submit">Add product</button>
        </div>


    </form>


name="---" is a key.

Now, in the browser, refresh, and put details inside evrything press submit and see the url.
The entered values will be assigned to these keys.

Now, with the help of get method, we can see everything in url, while in post methd, we don't.
And that is why we use post method.

So in <form > make changes.-- And write like--

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-3 mt-5">
    <h4>Enter product details</h4>
    <hr>
    <form method="POST" action="">-------------------------changes

Now refresh browser page.Put information. Submit-- and now we are getting error.

This error is regarding security issues. The CSRF matches the token number that is identity matching.

just  {% csrf_token %}  from error and put it below <form>

This csrf token generates random id which is matched eveytime values come from url.

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-3 mt-5">
    <h4>Enter product details</h4>
    <hr>
    <form method="POST" action="">
        {% csrf_token %} -----------------------------the token is generated by django itself.

now refresh the page and put the values again. Error will not come.

See in the view page source.Token value will change.

Now,goto views.py-------------
if you want to check,u can put under dash_product() in views.py --


def dash_product(request):
    print("method",request.method)
    return render(request,"product_dashboard.html")


this will print method POST in terminal.


def dash_product(request):
    if request.method=="POST":
        # retrieve data sent from form into python variable and store in database.
        pass
    else:
        #show empty form
        return render(request,"product_dashboard.html")

Now, this is giving error. HttpResponse error because in if stmt we are not returning anything.

So we need to return the data,and data is always linked with the keys.


def dash_product(request):
    if request.method=="POST":
        # retrieve data sent from form into python variable and store in database.
        pname=request.POST["pname"]
        desc=request.POST["pdesc"]
        price=request.POST["pprice"]
        cat=request.POST["cat"]
        print(pname,desc,price,cat)
    else:
        #show empty form
        return render(request,"product_dashboard.html")

still we will get the error in browser after submission,because we arenot returning anything.

Now, we will connect with the database.

Now, we will use xampp workbench.

in xampp we need apache toreach phpmyadmin gui to create database.

cmd prompt--cd\
c:\>cd xampp\mysql\bin
c:\xampp\mysql\bin>mysql -h localhost -u root
MariaDB [(none)]>

or through workbench u can do.

create database ecomm;

use ecomm;

MVT architecture in django--
model and templates.
views is a file where we write the logic.
view communicates with model and templates both.

we have seen view template communication before.

model is the representative of a table in database.
So, when we create a model in django, a table with the same name 
is created in the database.

ANd there is a procedure to create it.

Now,migration is moving from one place to another.
and this is done between tables.

So, when we do migrations in django, tables are automatically created.

We just need to create a database and there is no need of creation of table.
That will be done by django with the help of ORM.

Now, how to create a model, and how we can create a table with the help 
of this model?

By defult django prvides sqllite.

So we need to edit setings in settings.py file.

Now, settings reated to Database--

settings.py

on line 77 around something related to databases.

This is where we will do settings.


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

name is the name of the database.

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

'''

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ecomm',
        'HOST': 'localhost',
        'USER': 'root',
        'PASSWORD': '',
    }
}

Now, on saving this file , we can get error in the terminal,
improper configured. 
 raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.


Since we are not using sqlite, we need to change it to mysql.

'ENGINE': 'django.db.backends.mysql',---because we have changed mysql,
it requires mysql client. which is nothing but an api or a connector.

In flask it is pymysql.

we need to install this using pip cmd.

So for mysql , we need to install mysqlclient.

pip install mysqlclient

So press ctrl+c in terminal
  
(env) PS C:\Users\itvedant\Documents\Django\todo> pip install mysqlclient

pip freeze u can check.

now,

(env) PS C:\Users\itvedant\Documents\Django\todo> python manage.py runserver 

Now, in todoapp there is models.py-- and u can close settings file.


now we will create product table. In views.py u can check, what all information 
is coming. pname,pdesc,price,cat. So our cols will be id,pname,pdesc,price and cat.

create table product(id int primary key auto_increment,
name varchar(50),pdesc varchar(100),price float,cat varchar(10));

model.py-----

define class with name of the table in the database.

modelclassname= table name in the database.

class Product:
	data members are the cols in the table

now in order to give datatypes , there are inbuilt modules in package models.

Now, the class Product that we are creating,that needs to be inherited from models.Model class. This Model class is described by django only.

class Product(models.Model): #------------------------------- this is given by applicationname_classname i.e. todoapp_Product. This is aconvention given by django. In this way 
#we will see table in our database.
    name=models.CharField(max_length=50)
    pdesc=models.CharField(max_length=100)
    price=models.FloatField()
    cat=models.CharField(max_length=10)



now how we can create table with the help of this. Now what we are going to do now,u can do when creating app.
In settings.py, in the INSTALLED_APPS we need to register todoapp.
So, since we hav not done that,so django is still not recognizing todoapp as an app.

So,now to register our table in database,steps needed are--

1: stop server
2: python manage.py makemigrations
3: python manage.py migrate

migrate means to move from django to database.

Now inside todoapp,there is migrations is there.And it doesn't have anything.

so do ctrl+c in terminal and write--

(env) PS C:\Users\itvedant\Documents\Django\todo> python manage.py makemigrations

Now the o/p is no changes detected.

But we have made changes. These changes arenot reflecting because we have not added todoapp in settings.py

So in settings.py simply add 'todoapp'in installed apps.Now run above cmd.

(env) PS C:\Users\itvedant\Documents\Django\todo> python manage.py makemigrations

Migrations for 'todoapp':
  todoapp\migrations\0001_initial.py
    - Create model Product

Now afterthis if u will see migrations,0001_initial.py is created.

(env) PS C:\Users\itvedant\Documents\Django\todo> python manage.py migrate 

Now do 
use ecomm; in database and do 
show tables;
select * from todoapp_product;-----its empty

So,whenever u r creating an app while starting django, at that point only inside INSTALLED_APP,
write app name.

Now coming to views.py----

inside def dash_product, if condition, from here we will insert record.
So,inserting record --

from form---->views.py function-----> insert into table.
The steps are---
1.create an obj of model class.
now, Modelclass Name:product
and, to create object, eg. variable=classname().So,
p1=Product()
now, the data members are the cols. So we will use the concept of parameteriized constructors.
So, p1=Product(dm1=value1,dm2=value2.....)
so, from views.py dash_product(), we are gettign pname and other info.So,
p1=Product(name=pname,pdesc=desc,price=price,cat=cat) ---------this is how we will create object.

Now, these objects are the rows of a table.

def dash_product(request):
    if request.method=="POST":
        # retrieve data sent from form into python variable and store in database.
        pname=request.POST["pname"]
        desc=request.POST["pdesc"] #------------------------------------- pdesc is a formfilled and desc is a variable
        price=request.POST["pprice"]
        cat=request.POST["cat"]
        #print(pname,desc,price,cat)
        p1=Product(name=pname,pdesc=desc,price=price,cat=cat)
	print(p1)#------------------------------------------------------product class object
	p1.save()
	return HttpResponse("Record inserted successfully")

now,product class def is in model.py.So we will import class from models.py---

from django.shortcuts import render,redirect
from todoapp.models import Product

from django.http import HttpResponse


p1.save()----- is like a commit operation. For saving the info in a database


When we refresh browser,the method is get , and when we fill and send value the method is POST.
  
And so whenwe want to retrieve data , its a get method and request will go into else part.

Also, to retrieve records from a database--

when we insert record,it is done template->view->model

while,to fetch or retrieve records--

product---->views.py func----->product_dashboard.html
models	    views		templates

now, how to fetch records--- 
Modelname.Manager.all()

default name of the manager is objects. So writing Product.objects

now, in else part--

   else:
        #show empty form
        records=Product.objects.all()
        print(records)
        return render(request,"product_dashboard.html")

Now, refreshbrowserand see terminal o/p

now, we know that,we need a dictionary for passing records from django templates.
So, we will create an empty dictionary, 
content={}
content["data"]=records

    else:
        #show empty form
        records=Product.objects.all()
        #print(records)
        content={}
        content['data']=records
        return render(request,"product_dashboard.html",content)


Now open your product dashboard,we have done everything in 
<div class="col-md-3 mt-5">

so going to bootstap----content-----table---hoverablerows--copy overview code---and paste inside div.

now,inside body we require only 1 row.
and paste inside <div class="col-md-3 mt-5"> change the table class to hoverable.

<div class="col-md-8 mt-5">
    <table class="table table-hover">
        <thead>
          <tr>
            <th scope="col">Product Name</th>
            <th scope="col">Description</th>
            <th scope="col">Category</th>
            <th scope="col">Price</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th scope="row">1</th>
            <td>Mark</td>
            <td>Otto</td>
            <td>@mdo</td>
          </tr>
          
        </tbody>
      </table>


</div>

now goto browser,refresh and see--

<div class="col-md-8 mt-5">
    <h4>Product Details</h4>
    <hr>
    <table class="table table-hover">
        <thead>
          <tr>
            <th scope="col">Product Name</th>
            <th scope="col">Description</th>
            <th scope="col">Category</th>
            <th scope="col">Price</th>
            <th scope="col">Edit</th>
            <th scope="col">Delete</th>
          </tr>
        </thead>
        <tbody>
	  <tr>
            <th scope="row">1</th>
            <td>Mark</td>
            <td>Otto</td>
            <td>@mdo</td>
          </tr>
          
        </tbody>
      </table>

#--------------10/18/23--------

Now,the data

  <th scope="row">1</th>
            <td>Mark</td>
            <td>Otto</td>
            <td>@mdo</td> is a static data , we will make it dynamic.


Now,in views.py,data contains all the records in the model.
So, we need to iterate over this dataset.

        </thead>
        <tbody>
          {% for x in data %}---- this loop will repeat till the time we have 
          <tr>
            <th scope="row">1</th>
            <td>Mark</td>
            <td>Otto</td>
            <td>@mdo</td>
          </tr>
          {% endfor %}
          
        </tbody>
      </table>


</div>

{% endblock 'main' %}

Now,see the data member name in models.py and give that. It is not a variable name.

        <tbody>
          {% for x in data %}
          <tr>
            <th>{{x.name}}</th>
            <td>{{x.pdesc}}</td>
            <td>{{x.price}}</td>
            <td>{{x.cat}}</td>
          </tr>
          {% endfor %}
          
        </tbody>
      </table>


</div>


---- this will give buttons

        <tbody>
          {% for x in data %}
          <tr>
            <th>{{x.name}}</th>
            <td>{{x.pdesc}}</td>
            <td>{{x.price}}</td>
            <td>{{x.cat}}</td>
            <td><button class="btn btn-warning">Edit</button></td>-------------
            <td><button class="btn btn-danger">Delete</button></td>---------------
          </tr>
          {% endfor %}
          
        </tbody>
      </table>


</div>


Now edit and delete buttons require anchor tag,and also the id needs to be 

 {% for x in data %}
          <tr>
            <th>{{x.name}}</th>
            <td>{{x.pdesc}}</td>
            <td>{{x.price}}</td>
            <td>{{x.cat}}</td>
            <td><a href="/edit"><button class="btn btn-warning">Edit</button></a></td>------------
            <td><button class="btn btn-danger">Delete</button></td>
          </tr>
          {% endfor %}
          
        </tbody>
      </table>

In urls.py we have already done it-- path("edit/<rid>",views.edit), So.

now we will bind this with id to perform edit/delete action. in

<td><a href="/edit"><button class="btn btn-warning">Edit</button></a></td>


 <tr>
            <th>{{x.name}}</th>
            <td>{{x.pdesc}}</td>
            <td>{{x.price}}</td>
            <td>{{x.cat}}</td>
            <td><a href="edit/{{x.id}}"><button class="btn btn-warning">Edit</button></a></td>-----------
            <td><a href="delete/{{x.id}}"><button class="btn btn-danger">Delete</button></a></td>------
          </tr>


Now, go and refresh browser.ON clicking edit--ID to be delted is 1..something like this msg will come.

Now, add product through browser-- record inserted---Now go back and see, that record will be there.

But we donot want this.We want after insertion,it should be automatically redirected.

Going into views.py-- simply rearrange the code. put delete and edit at the end.

def dash_product(request):
    if request.method=="POST":
        # retrieve data sent from form into python variable and store in database.
        pname=request.POST["pname"]
        desc=request.POST["pdesc"]
        price=request.POST["pprice"]
        cat=request.POST["cat"]
        #print(pname,desc,price,cat)
        p1=Product(name=pname,pdesc=desc,price=price,cat=cat)
        print(p1)
        p1.save()
        return redirect("/pdashboard") ------------------------------changes

So  now goto browser, insert some values, after insertion ,page gets redirected to dashboard page only.

------ delete - soft delete edit---

product_dashboard.html-----

   <tbody>
          {% for x in data %}
          <tr>
            <th>{{x.name}}</th>
            <td>{{x.pdesc}}</td>
            <!---<td>{{x.cat}}</td>--->
            {% if x.cat == "E" %}
            <td>Electronics</td>
            {% endif %}
            
            <td>{{x.price}}</td>
            
            
            <td><a href="/edit/{{x.id}}"><button class="btn btn-warning">Edit</button></a></td>
            <td><a href="delete/{{x.id}}"><button class="btn btn-danger">Delete</button></a></td>
          </tr>
          {% endfor %}
          
        </tbody>
      </table>
Now for grocery and clothes--

       <tbody>
          {% for x in data %}
          <tr>
            <th>{{x.name}}</th>
            <td>{{x.pdesc}}</td>
            <!---<td>{{x.cat}}</td>--->
            {% if x.cat == "E" %}
            <td>Electronics</td>
            {% elif x.cat == "C" %}
            <td>Clothes</td>
            {% else %}
            <td>Grocery</td>
            {% endif %}
            
            <td>{{x.price}}</td>
            
            
            <td><a href="/edit/{{x.id}}"><button class="btn btn-warning">Edit</button></a></td>
            <td><a href="delete/{{x.id}}"><button class="btn btn-danger">Delete</button></a></td>
          </tr>
          {% endfor %}
          
        </tbody>
      </table>


Now learning soft delete hard del and edit----

Hard del-- id will be deleted permanently from the table and cannot be retrieved.

Soft del-- record remains in the db but its not visible to the user

Steps soft del---

now, row in the db is an object of the model class.

In views.py,p1 contains all the rows of the table which is objectin django.

1.retrieve records form db table to be deleted.

For this, syntax is - 

in sql we write like-- select * from todoapp_product where id=rid;# rid contains id tobe deleted.

Now we are not going to write traditional sql query,that is handled by orm.

obj=Modelname.objects.get(condition)

eg. x=Product.objects.get(id=rid) # id is a colname


2.obj.delete() eg. x.delete()

So go to browser and delete click del button.Records gets deleted.

views.py-----


def delete(request,rid):
    x=Product.objects.get(id=rid)
    x.delete()
    return redirect('/pdashboard')


Now,for soft delete, we nneed toadd a col into our databse table is_deleted .We need to add this 
at the start only. Its by default value is no. SO  if the value is no, then that obj is present
and no need of showing to user.

So we have a boolean value,y or n or 0 or 1, for each record in a col named as is_deleted.

if is_deleted value is N then the record is not deleted, and must be shown to user.
otherwise,record is deleted and should not be shown to user.

So, whenever we are doing any changes on our table, we need to migrate the changes
to make the changes in sync with django framework an database.

So,in models.py---

class Product(models.Model):
    name=models.CharField(max_length=50)
    pdesc=models.CharField(max_length=100)
    price=models.FloatField()
    cat=models.CharField(max_length=10)
    is_deleted=models.CharField(max_length=5)---------------


So, stop the server-- now,under migration , we only have 0001something file.
Now, we are adding rows to a table which contains records,So we need to populate
existing records with some values.

(env) PS C:\Users\itvedant\Documents\Django\todo> python manage.py makemigrations
It is impossible to add a non-nullable field 'is_deleted' to product without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 1
Please enter the default value as valid Python.
The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value.
Type 'exit' to exit this prompt
>>> 'N'
Migrations for 'todoapp':
  todoapp\migrations\0002_product_is_deleted.py
    - Add field is_deleted to product


(env) PS C:\Users\itvedant\Documents\Django\todo> python manage.py migrate

Now,go to workbench 
select * from todoapp_product;
see the o/p. workis done.

So,in views.py,code for soft delete--

Now, hard delete we did with the help of get,but soft del we need to do it with filter().

1.retrieve record with the help of filter()
2.obj=modelname.objects.filter(id=rid)
eg. x=Product.objects.filter(id=rid)

2.update that filled value func with update().
obj.update(colname1=newvalue1,colname2=newvalue2,....)

eg.x.update(is_deleted="Y")

so we will check on backend,if the value changed from n to y or not.
Just press delete from the browser, and see in backend table, that record is_deleted
will be changed from n to y. It changed.

The record is still showing in the dashboard. So we need to change few more things.--

def delete(request,rid):
    # hard del
    #x=Product.objects.get(id=rid)
    #x.delete()

    # soft del,we need to convert is_deleted value n to y.
    x=Product.objects.filter(id=rid)
    x.update(is_deleted="Y")
    return redirect('/pdashboard')

So now we need to change dashboard function.

Now,i want to show only those records, for which is_deleted is N.

Conventional query is like-- select * from todoapp_product where is_deleted="N";

In our views.py dashboard part,we are retrieving all.SO change this--

  else:
        #show empty form
        #records=Product.objects.all()
        records=Product.objects.filter(is_deleted="N")
        #print(records)
        content={}
        content['data']=records
        return render(request,"product_dashboard.html",content)

Save all work and delete from browserand see the changes in front end and backend.

Now, we also need to check when inserting a record,its taking b default value as N or not.

So goto browser and enter a product.Now check in the database, select * from todoapp_product;
 -inserted record'sis_deleted is not set. And that is the reason its not reflected.

So,while inserting a record, is_deleted we will set to N. 

views.py-----------------------------------



def dash_product(request):
    if request.method=="POST":
        # retrieve data sent from form into python variable and store in database.
        pname=request.POST["pname"]
        desc=request.POST["pdesc"]
        price=request.POST["pprice"]
        cat=request.POST["cat"]
        #print(pname,desc,price,cat)
        p1=Product(name=pname,pdesc=desc,price=price,cat=cat,is_deleted="N")-------------------
        print(p1)
        p1.save()
        return redirect("/pdashboard")

 
Now, from browser add 1 more product and see. Now as you add product ,it is reflected.


And for the earlier record which didnt had is_deleted set, wecan write an sql query and set its
vlue from workbench.


update todoapp_product set is_deleted="N" where  id=24;

and nowif u will go and refresh browser,u will see that record.

Now wewill be doing edit operation.

Now when we insert the record, the formis blank.But when we edit a record, it is filled with the previous information.

So, edit op has 2 stepps. Show user previous info. Then update record with new infor given by user.

So, step1 -- showing previous info-------

so,on clicking edit option from browser, we are getting redirected. So we will require 1 html template for redirection.
So,click on template folder-->newfile-->editproduct.html, this will be similare to product_dashboard form only.

So,copy paste everything from product_dashboard.html and remove md-8 div completely.

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-3 mt-5">
    <h4>Update product details</h4> -------------------------------------------------change
    <hr>
    <form method="POST" action="">
        {% csrf_token %}

        <div class="mb-3">
            <label for="pname" class="form-label">Product name</label>
            <input type="text" class="form-control" id="pname" name="pname" placeholder="Enter product name">
        </div>
        <div class="mb-3">
            <label for="pdesc" class="form-label">Product description</label>
            <textarea class="form-control" id="pdesc" name="pdesc" rows="3"></textarea>
        </div>
        <div class="mb-3">
            <label for="pprice" class="form-label">Product price</label>
            <input type="number" class="form-control" id="pprice" name="pprice" placeholder="Enter product price">
        </div>
        <div class="mb-3">
            <select class="form-select" name="cat" aria-label="Default select example">
                <option selected>Open this select menu</option>
                <option value="E">Electronics</option>
                <option value="G">Groceries</option>
                <option value="C">Clothes</option>
            </select>
        </div>
        <div class="class mb-3">
            <button class="btn btn-primary" type="submit">Add product</button>
        </div>


    </form>
    

</div>


{% endblock 'main' %}
 

Now in view.py we need to update--

def edit(request,rid):
    #str1="Hello from edit function "
    #print(rid)
    #return HttpResponse("ID to be edited"+rid)
    rec=Product.objects.get(id=rid)
    print(rec)
    return HttpResponse("ID to be edited "+rid)

Now, go to browser.Press edit key.Redirection happened and in terminal we got product object(24)

Now, weneed to pass this object,with the helpof a dictionary lets say content={}.
 
def edit(request,rid):
    #str1="Hello from edit function "
    #print(rid)
    #return HttpResponse("ID to be edited"+rid)
    rec=Product.objects.get(id=rid)
    #print(rec)
    content={}
    content["data"]=rec
    #return HttpResponse("ID to be edited "+rid)
    return render(request,"editproduct.html",content)

Now going to editproduct.html--- 
there is someting known as value attribute.

editproduct.html---------

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-3 mt-5">
    <h4>Update product details</h4>
    <hr>
    <form method="POST" action="">
        {% csrf_token %}
        <div class="mb-3">
            <label for="pname" class="form-label">Product name</label>
            <input type="text" class="form-control" id="pname" value="{{data.name}}" name="pname" placeholder="Enter product name">
        </div>
        <div class="mb-3">
            <label for="pdesc" class="form-label">Product description</label>
            <textarea class="form-control" id="pdesc" name="pdesc" rows="3">{{data.pdesc}}</textarea>
        </div>
        <div class="mb-3">
            <label for="pprice" class="form-label">Product price</label>
            <input type="number" class="form-control" id="pprice" value="{{data.price}}" name="pprice" placeholder="Enter product price">
        </div>
        <div class="mb-3">
            <select class="form-select" name="cat" value="" aria-label="Default select example">
                {% if data.cat == "E" %}
                <option value="E" selected>Electronics</option>
                {% elif data.cat == "C" %}
                <option value="C" selected>Clothes</option>
                {% elif data.cat == "G" %}
                <option value="G" selected>Grocery</option>
                {% endif %}
                <option value="E">Electronics</option>
                <option value="G">Grocery</option>
                <option value="C">Clothes</option>
            </select>
        </div>
        <div class="class mb-3">
            <button class="btn btn-primary" type="submit">Update product</button>
        </div>
        
        

    </form>
</div>
{% endblock 'main' %}





---views.py-------------

def edit(request,rid):
    #str1="Hello from edit function "
    #print(rid)
    #return HttpResponse("ID to be edited"+rid)
    if request.method=="POST":
        pass
    else:

        records=Product.objects.get(id=rid)
        #print(rec)
        c={}
        c["data"]=records
        print(c["data"])
        return render(request,"editproduct.html",c)


2 step--- on getting edited information its post method.-- the updated value we have in the respected variables.
	upname=request.POST["pname"]
        udesc=request.POST["pdesc"]
        uprice=request.POST["pprice"]
        ucat=request.POST["cat"]

views.py-----------------------------

def edit(request,rid):
    #str1="Hello from edit function "
    #print(rid)
    #return HttpResponse("ID to be edited"+rid)
    if request.method=="POST":
        
        upname=request.POST["pname"]
        updesc=request.POST["pdesc"]
        uprice=request.POST["pprice"]
        ucat=request.POST["cat"]
        x=Product.objects.filter(id=rid)
        x.update(name=upname,pdesc=updesc,price=uprice,cat=ucat)
        return redirect('/pdashboard')
    else:

        records=Product.objects.get(id=rid)
        #print(rec)
        c={}
        c["data"]=records


Now,goto browser and edit-- you will see the changes.

---------Filter Sorting-------------- filtering on the basis 
of category..of price...then brands..etc

filters by category..lets say--

product_dashboard.html-----

      {% endfor %}
          
        </tbody>
      </table>


</div>

<div class="col-md-4 mt-5">
  <h4>Filter by Category</h4>
  <hr>
  <p><a href="/elec">By Electronics</a></p>
  <p><a href="/groc">By Grocery</a></p>
  <p><a href="/cloths">By Clothes</a></p>



</div>

{% endblock 'main' %}

refresh dashboard

we can also style it a little.

go to style.css--

a{
    text-decoration: none;
}

now, registering above urls in todoapp urls.

    path("pdashboard",views.dash_product),
    path("elec",views.filter_electronics),
]

now,go in views.py--- writing function for this.

now lets say for category electronics, 2 cnditions needs to be satisfied-- 

cat should be E and is_deleted=N

in sql-- select * from todoapp_product where cat="E" and is_deleted="N";

but for writing in django orm,we know filter, but there is more than 1 condition.

there is something known as q object which we will import.

from django.http import HttpResponse
from django.db.models import Q ---------------------- Q is the class which helps us to build condition obj.


def filter_electronics(request):
    q1=Q(cat="E")
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

goto browser,click on filter by category electronics, see the o/p.

todoapp-->urls.py
Now,same changes for groceries and clothes.

    path("elec",views.filter_electronics),
    path("groc",views.filter_grocery),
    path("cloths",views.filter_cloths),
]

views.py
def filter_grocery(request):
    q1=Q(cat="G")
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

def filter_cloths(request):
    q1=Q(cat="C")
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)


now we want all to get all the data.

so in product_dashboard.html----

<div class="col-md-4 mt-5">
  <h4>Filter by Category</h4>
  <hr>
  <p><a href="/pdashboard">All</a></p>-------------------------------
  <p><a href="/elec">By Electronics</a></p>  
 
now,wewill reduce code in views.py as there is alot of repetition of code.

so comment all the 3  funcs written earlier.

def filter(request,vcat):
    if vcat == "elec":
        f="E"
    elif vcat == "groc":
        f="G"
    elif vcat == "cloths":------------- these names should be same as product_dashboard.html names 
        f="C"
    q1=Q(cat=f)
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)


and in todoapp->urls.py comment

and in product_dashboard.html---

 <hr>
  <p><a href="/pdashboard">All</a></p>
  <p><a href="filter/elec">By Electronics</a></p>
  <p><a href="filter/groc">By Grocery</a></p>
  <p><a href="filter/cloths">By Clothes</a></p>
</div>

Now we will take url for them--

    #path("elec",views.filter_electronics),
    #path("groc",views.filter_grocery),
    #path("cloths",views.filter_cloths),
    path("filter/<vcat>",views.filter), 
]

vcat is a parameter which is taking i/p category.
now in views.py---

def filter(request,vcat):
   print(vcat)

Now, if we will go and refresh browser and select electronics cate , we will get error
but in terminal we are getting selected cate.

http://127.0.0.1:8000/filter/filter/groc----now this is the issue we are getting. filter/filter----

in product_dashboard.html----

<div class="col-md-4 mt-5">
  <h4>Filter by Category</h4>
  <hr>
  <p><a href="/pdashboard">All</a></p>
  <p><a href="/filter/elec">By Electronics</a></p>---------- change put / in all-----
  <p><a href="/filter/groc">By Grocery</a></p>
  <p><a href="/filter/cloths">By Clothes</a></p>


Now creating filters for inequalities. like between, above below price <>

product_dashboard.html---

<div class="col-md-4 mt-5">
  <h4>Filter by Price</h4>
  <hr>
  <p><a href="/pdashboard">All</a></p>
  <p><a href="/pfilter/>10000">Above 10000</a></p>
</div>

SAve all,goto dashboard-- refresh. changes will reflect.

NOw, from todoapp urls.py--

    path("filter/<vcat>",views.filter),
    path("pfilter/<p>",views.pfilter),
]

views.py---

def pfilter(request,p):
    print(p)------------------- just for checking if we are receiving p or not

save all then refresh browser. click on price link. Got error,value recieved in terminl


def pfilter(request,p):
    if p == ">10000":
        q1=Q(price__gt=10000)------------------------- __gt greater than,__gte greter than equalto
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

refresh dashboard--

nowproduct_dashboard.html---

  <p><a href="/pfilter/>10000">Above 10000</a></p>
  <p><a href="/pfilter/<10000">Below 10000</a></p>
</div>

urls.py--nothing--

views.py--

def pfilter(request,p):
    if p == ">10000":
        q1=Q(price__gt=10000)
    elif p == "<10000":
        q1=Q(price__lt=10000)

    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.

refresh dashboard--

Next is sorting----------

  <p><a href="/pfilter/>10000">Above 10000</a></p>
  <p><a href="/pfilter/<10000">Below 10000</a></p>
</div>

<div class="col-md-4 mt-5">
  <h4>Sort by Price</h4>
  <hr>
  <p><a href="/sort/htol">High to Low</a></p>
  <p><a href="/sort/ltoh">Low to High</a></p>
</div>

Save all refresh--

todoapp--urls.py -- path---

    path("pfilter/<p>",views.pfilter),
    path("sort/<sv>",views.sort),--------------------------
]

views.py----now sorting is sorting+filter

def sort(request,sv):
    if sv == "ltoh":
        rec=Product.objects.order_by("price")
    elif sv == "htol":
        rec=Product.objects.order_by("-price")
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

Dashboard--try---

def sort(request,sv):
    if sv == "ltoh":
        #rec=Product.objects.order_by("price")
        rec=Product.objects.filter(is_deleted="N").order_by("price")---orm
    elif sv == "htol":
        #rec=Product.objects.order_by("-price")
        rec=Product.objects.filter(is_deleted="N").order_by("-price")---orm


Save========refreh dashboard-------------

orm manager class----------------7:51-----

start xampp-->start workbench then launch server.

Object Relational Mapping.
Whatever changes we are doing in model,
and after migration they are reflecting in
our database, this is done by ORM.


In models.py we havemigration class--
class Product(models.Model):
    name=models.CharField(max_length=50)
    pdesc=models.CharField(max_length=100)
    price=models.FloatField()
    cat=models.CharField(max_length=10)
    is_deleted=models.CharField(max_length=5)


now, python manage.py makemigrations
this cmd created file for migrations in migration folder.
These changs doesnot reflect to the db table.
And only contains file with the code,which is ready to migrate.

python manage.py migrate
this cmd run migration files in the migration folder and 
changes will be reflected in the db.

table:todoapp_product

Now,in editor delete func of views.py--

rec is receiving the object fromthe table.

1.classname in model=tablename in db
egStudent-- todoapp_student

2. data memeber of modl class = cols in db

3. obj of modelclass=record or row or tuple in db

Advantage of this mapping is--- since it is mapped,
changs done inthe model gets reflected in the db table.

ORM provides small methods with the help of which 
we can perform sql queries on the table.
create(),save()--for inserting
all()-- to retrieve all records
get()-- to retrieve particular record.
filter()-- similar to where clause.
order_by() -- sort records
delete()-- to remove record
update()-- to update record.

behind these functions, orm is handling sql query.

Manager class and obj of manager class---

Django model --->manager class--->db table

mnager class is an interface or middleman between
django model and db table who is responsible for
reflecting changes in the db table given by django model.

Now, tis manager class is present inside models module.

this we have written inside models.py

objects---
objects is a default object.
Now if we want to use objects name somewhere
in our project then it will create a confusion.

So,in that case we will chnge the name ofthe 
default class manager.

So, changing name of the default calss manager object--
by creating obj of class Manager in model  
class Student(models.Model):
	Data members
	object_name=models.Manager()

So going to models.py----


    cat=models.CharField(max_length=10)
    is_deleted=models.CharField(max_length=5)

    obj1=models.Manager() # changing name of the default obj of manager class


Now, what will happen if we will try to insert data?
So, from views.py-- in edit func we have used objects,
So, we need to change tis objects to obj1.

On refreshing only we are getting error, products as no attribute objects.

from django.shortcuts import render,redirect
from todoapp.models import Product

from django.http import HttpResponse
from django.db.models import Q

# Create your views here.
def index(request):
    #return HttpResponse("<b>Hello from index</b>")
    return redirect("/index")

def home(request):
    content={}
    #content["x"]="Itvedant"
    #content["x"]=500
    #content["y"]=100
    content["data"]=[10,20,30,40,50,60]
    return render(request,"index.html",content)


def contact(request):
    return render(request,"contact.html")


def product(request):
    return render(request,"product.html")


def dash_product(request):
    if request.method=="POST":
        # retrieve data sent from form into python variable and store in database.
        pname=request.POST["pname"]
        desc=request.POST["pdesc"]
        price=request.POST["pprice"]
        cat=request.POST["cat"]
        #print(pname,desc,price,cat)
        p1=Product(name=pname,pdesc=desc,price=price,cat=cat,is_deleted="N")
        print(p1)
        p1.save()
        return redirect("/pdashboard")
    else:
        #show empty form
        #records=Product.objects.all()
        records=Product.obj1.filter(is_deleted="N")
        #print(records)
        content={}
        content['data']=records
        return render(request,"product_dashboard.html",content)

def edit(request,rid):
    #str1="Hello from edit function "
    #print(rid)
    #return HttpResponse("ID to be edited"+rid)
    if request.method=="POST":
        
        upname=request.POST["pname"]
        updesc=request.POST["pdesc"]
        uprice=request.POST["pprice"]
        ucat=request.POST["cat"]
        x=Product.obj1.filter(id=rid)
        x.update(name=upname,pdesc=updesc,price=uprice,cat=ucat)
        return redirect('/pdashboard')
    else:

        records=Product.obj1.get(id=rid)
        #print(rec)
        c={}
        c["data"]=records
        print(c["data"])
        return render(request,"editproduct.html",c)


def delete(request,rid):
    # hard del
    #x=Product.objects.get(id=rid)
    #x.delete()

    # soft del,we need to convert is_deleted value n to y.
    x=Product.obj1.filter(id=rid)
    x.update(is_deleted="Y")
    return redirect('/pdashboard')
'''
def filter_electronics(request):
    q1=Q(cat="E")
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)


def filter_grocery(request):
    q1=Q(cat="G")
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

def filter_cloths(request):
    q1=Q(cat="C")
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.objects.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)
'''

def filter(request,vcat):
    if vcat == "elec":
        f="E"
    elif vcat == "groc":
        f="G"
    elif vcat == "cloths":
        f="C"
    q1=Q(cat=f)
    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.obj1.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

def pfilter(request,p):
    if p == ">10000":
        q1=Q(price__gt=10000)
    elif p == "<10000":
        q1=Q(price__lt=10000)

    q2=Q(is_deleted="N")
    # then we will use these conditions for filter.
    rec=Product.obj1.filter(q1 & q2)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

def sort(request,sv):
    if sv == "ltoh":
        #rec=Product.objects.order_by("price")
        rec=Product.obj1.filter(is_deleted="N").order_by("price")
    elif sv == "htol":
        #rec=Product.objects.order_by("-price")
        rec=Product.obj1.filter(is_deleted="N").order_by("-price")
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

Now, refresh dashboard and edit some info.

Now, as per our eg,objects or obj1 are the objects of
Manager class. The manager class contains, methods such as all(),
get(),filter(),etc

Now, if I wnt to create my own method,i.e.
creating customized method in manager class--

1, create manager.py file in application folder
2, create class inherited from manager class
3, define method in that class

manager.py--

from django.db import models

class Customclass(models.Manager):
	def sortfilterasc(self):
	    return super().filter(is_deleted="N").order_by("price")

 	def sortfilterdesc(self):
	    return super().filter(is_deleted="N").order_by("-price")

super()-- it is obj of parent class.
return stmt returns value at the place of the func or method call.

above return stmt returns result set or records which satisfy
condition to the place where sortfilterasc() and sortfilterdesc(),
function or methods being called or invoked.

So,select todoapp---->new file--

from django.db import models

class Customclass(models.Manager):
    def sortfilterasc(self):
        return super().filter(is_deleted="N").order_by("price")
    def sortfilterdesc(self):
        return super().filter(is_deleted="N").order_by("-price")

Now, we will create an obj of Customclass.
so,going to models.py---

from django.db import models
from todoapp.manager import Customclass
# Create your models here.

class Product(models.Model):
    name=models.CharField(max_length=50)
    pdesc=models.CharField(max_length=100)
    price=models.FloatField()
    cat=models.CharField(max_length=10)
    is_deleted=models.CharField(max_length=5)

    obj1=models.Manager() # changing name of the default obj of manager class
    cobj1=Customclass()



Now goto views.py----


def sort(request,sv):
    if sv == "ltoh":
        #rec=Product.objects.order_by("price")
        #rec=Product.obj1.filter(is_deleted="N").order_by("price")
        rec=Product.cobj1.sortfilterasc()
    elif sv == "htol":
        #rec=Product.objects.order_by("-price")
        #rec=Product.obj1.filter(is_deleted="N").order_by("-price")
        rec=Product.cobj1.sortfilterdesc()
    content={}

Now,going to dashboard, refresh-- see high to low,low to high

Admin----

Web application roles--

1. User -- it has limited rights.
2. Admin -- has all the rights on the web application.

so product_dashboard.html------------------------------------

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-12">
  <h3>Product Admin Panel</h3>
  <hr>
</div>

in bootstrap--->utilities---tecxt color--- or u can directly write-- or

{% extends 'base.html' %}
{% block 'main' %}

<div class="col-md-12 mt-5">
  <h3 class="text-danger">Product Admin Panel</h3>---------for red color
  <hr>
</div>

Now admin is nothing but a super user.

In todo-->todo-->urls.py--->we see the admin appname.
And in settings.py--we register our admin app, 
So,this is an inbuilt app in django, that gives inbuilt admin panel.

So, django.contrib.admin------it is a preinstalled application given by django,
that gives ready made admin panel for the application, thus saving time to create
admin panel from scratch.

url.py file in the project flder has a url to access admin panel.

path('admin/',admin.site.urls) all the urls are ther in admin url.

Simply write http://127.0.0.1:8000/admin on dashboard--- and u will get admin panel.

but we donot know username and password.So we need to create one.

So, superuser or admin--
In order to access admin panel there is need to create superuser.

In terminal,create superuser.

cmd to create superuser---

python manage.py createsuperuser

email:parinita@itvedant.com
username:parinita
Enter password:redhat123@
re-type password:redhat123@

So do ctrl+c from terminal-- and give above cmd.

(env) PS C:\Users\itvedant\Documents\Django\todo> python manage.py createsuperuser
Username (leave blank to use 'itvedant'): parinita
Email address: parinita@itvedant.com
Password: 
Password (again):
Superuser created successfully.
(env) PS C:\Users\itvedant\Documents\Django\todo> 

NOw that we have createdsuperuser, we can login through that.

login and u will get admin panel.

Now table is nothing but model.

do-- show tables; -----in workbench or u can start xampp--start apache--admin--ecomm--
and see the tables--

now, auth_user is an imp table that we will be looking alot.



Open auth_user and see--

admin--part1---24:00

start phpmyadmin from xampp--->admin--->
ecomm---> or from workbench u can do show tables;

Click on auth_user--- this table keeps a track of user which is created.
recently, we created 1 user- info regarding that is present here.
thereis another table,auth_group-- there can be groups like marketing group,
operations,hr, etc.
Now,if we will see in our dashboard,there is users and groups.
Now,users is the model available to the admin. 

So,on dashboard-->click on (user)change---now u can see the user we created.

Now,there are ceratin filters available on this page.

by staff status-- whether this user is added a staff or not.
by superuser status-- this field u can check in phpmyadmin also 
by active-- whther this user is active or deleted.

So, now lets say creating a user--through dashboard-- add user--

username-- firstuser123
pwd-- Pa$$word@20 --- save---

in the next page,we got some check boxes.-- save

Now,goto phpmyadmin-- refresh--the added user reflected 
over here.

now,in dashboard i.e.http://127.0.0.1:8000/admin/auth/user/
now if i want to edit--- clickon the username-- i.efirstuser123
fn-- first
ln-- user
email-- firstuser@gmail.com

click on staff status.

Now,scrolling down, diferent permissions we see in authorizaion.
-- save

now, refresh phpmyadmin-- changes will reflect--
Now,in phpmyadmin,is_staff willbe changed to 1

algorithms like md5,sha,etc are used for hashing.

Now,if we want to deactivate this user--

Now,in dashboard --click logout--
now login with the user we have created.
un-- firstuser123
pwd--Pa$$word@20

--o/p u dont have permission to view or edit anything.

Now admin has permission which simple user doesnt have.


now login as admin--

user-- parinita
pwd-- redhat123@

+ means addition , other one is editing.

Now,going to phpmyadmin-- is_active 1,0 means deleted
if we will untick active from user, So instead of delelting a
user account, simply untickactive. In such case user will be 
visible to admin,but user's account will get inactivated.

Now, try to edit active status of firtuser123 
and then see.
and refresh is_active in phpmyadmin-- its 0 now.

and from admin login from dashboard,try to login 
with firstuser123, it willnot let you.

Now, if we login from backend, i.e. from phpmyadmin,
do is_active=1.,and refresh and see.

admin part 2---------------------------

Now goto admin part. login as admin.

we can see groups and users model which are by default.

Now we will see how we can add our own model which will be visible over here.

See,the dashboard--pdashboard---

in /admin --we should get a provision to add,edit,delete our product.
This is the same thing which we can do from dashboard. And now we are ddoing from admin panel.

Now,wewant toadd or register ourmodel todjango adminpanel.
steps1. open admin.py file from application folder.
So,todoapp-->admin.py
2. import the model which needs to be register in admin file.
Now, this model we have defined in model.py file.So we will 
import this file.i.e. import class into admin.py file.

admin.py

from django.contrib import admin
from todoapp.models import Product---- note in models.py we have class Product
# Register your models here.
3.Now, syntax for registering a model--
admin.site.register(modelname)

register model in admin.py file as follows-

from django.contrib import admin
from todoapp.models import Product
# Register your models here.
admin.site.register(Product)

So,now go and refresh admin-- u will see Products coming.

Now, when we will click on this, we will get some objects,
which are rows in the table.

So,now we got a provision to add product from here as well.

So,on clicking on the object, we will get its info.

lets say adding product--admin/

cat-E,is_deleted-N

dashboard/-- refresh-- added product reflected.

Now, delete from admin is hard_delete.

Next task is changing default name of tuplesin adminpanel.
which is Product object().
i.e. modelclassname object(number)
but this is not user friendly. We want the actual product name.
like in dashboard or backend.

steps-- 1.open models.py--
2.define __str__(self) function in the model class.
and the col name which u want to show return that.

models.py
class Product(models.Model):
	def __str__(self):
	    return self.col_name


class Product(models.Model):
    name=models.CharField(max_length=50)
    pdesc=models.CharField(max_length=100)
    price=models.FloatField()
    cat=models.CharField(max_length=10)
    is_deleted=models.CharField(max_length=5)

    obj1=models.Manager() # changing name of the default obj of manager class
    cobj1=Customclass() # custom class obj

    def __str__(self):---------------- changes
        return self.name

refresh /admin--------

Now,display all fields on admin panel--
i.e. we want entire table.

Now, like in manager.py we declaredee Customerclass,
which inherited from manager class.

lly, in admin, we need customization,so we will create an admin class.

1. define admin class which is derived from admin.ModelAdmin class.
class ProductAdmin(admin.ModelAdmin):

2. the name list_display=[col_names] is fixed.
i.e. list_display=["name",....]
or instead of list we can define tuple.

list_display=(colnames,...)

3.register model and modeladmin class with admin.

admin.site.register(modelname,modeladminclassname)


admin.py----

from django.contrib import admin
from todoapp.models import Product
# Register your models here.
# admin.site.register(Product)

class ProductAdmin(admin.ModelAdmin):
    list_display=["id","name","pdesc","price"]
admin.site.register(Product,ProductAdmin)


SAve all-- refresh /admin


then ,u can remove id from list_display.

admin part 2-- 50:16---------
Now, the spacing is getting adjusted because 
content space.

Now,applying filters--

define list_filter in the admin class.

list_filter=['colname1','colname2',...]


class ProductAdmin(admin.ModelAdmin):
    list_display=["name","pdesc","price"]
    list_filter=["price",]
admin.site.register(Product,ProductAdmin)

SAve the changes.

refresh /admin

Now on price we cant do any customization.

list_display=["name","pdesc","price"]
list_filter=["is_deleted","cat"]

Now applying customized filter on admin panel.

Custom filter in admin panel--

1.To create customized filter, define filter class derived from,
admin.SimpleListFilter 

class MyPriceFilter(admin.SimpleListFilter):
i.e. we arecreating our own MyPriceFilter
title=""
parameter_name=""

def lookups(self,request,model_admin):
	return(("labelref','label_on_admin_panel'))
def queryset(self,request,queryset):
	if self.value()=='labelref':
		return queryset.filter(condition)

So, above isour structure. Now how we are going touse it for price?-- 
And we will do method overriding of lookups.

eg.class MyPriceFilter(admin.SimpleListFilter):
	title="Price"
	parameter_name="By Price"

	def lookups(self,request,model_admin):
	    return(('greater','Price>5000'))

labeled ref means--refered frominside like greater.
The Price>5000 will appear which is internally defined as greater.
Wehave given this in tuple.
So first we will seethis filter only and then we will edit more.
the,queryset func-- so whenever we click on something,a query is fired
and internal filtering is done, So same thing-- i.e. 
when price>5000 is clicked, self.value will be equal to greater. 
	def queryset(self,request,queryset):
	    if self.value()=="greater":
		return queryset.filter(price__gt=5000)
	    else:
		return queryset.all()

paste abovecodein admin.py above ProductAdmin class.
 

class MyPriceFilter(admin.SimpleListFilter):----------------------------
	title="Price" ------------------------------------------- this is what is displayed
	parameter_name="By Price"-------------------------------- this is used internally.
	def lookups(self, request, model_admin):
		return (("greater","Price>5000"))
	def queryset(self,request,queryset):
		if self.value()=="greater":
			return (("greater","Price>5000"),("lesser","Price<5000")))----  this method requires atleast 2 values to be returned.
		else:
			return queryset.all()
			
	
		
class ProductAdmin(admin.ModelAdmin):
    list_display=["name","pdesc","price"]
    list_filter=["is_deleted","cat"]

Now, if we want to get this filter visible,write the name of this class in list_filter.
Donot put in double quotes. So,


#defining customer filter

class MyPriceFilter(admin.SimpleListFilter):
	title="price"
	parameter_name="By Price"
	def lookups(self, request, model_admin):
		return (("greater","Price>5000"),("lesser","Price<5000"))
	def queryset(self,request,queryset):
		if self.value()=="greater":
			return queryset.filter(price__gt=5000)
		elif self.value()=="lesser":
			return queryset.filter(price__lt=5000)
			
		else:
			return queryset.all()
			
	
		
class ProductAdmin(admin.ModelAdmin):
    list_display=["name","pdesc","price","is_deleted"]
    list_filter=["is_deleted","cat",MyPriceFilter]


Now, save everything and refresh admin.


	def queryset(self,request,queryset):
		if self.value()=="greater":---------------- we can also write like--
			q1=Q(price__gt=5000)
			q2=Q(is_deleted="N")
			return queryset.filter(q1 & q2)
		elif self.value()=="lesser":
			return queryset.filter(price__lt=5000)
			
		else:
			return queryset.all()
			
 
 ---Product filter between given price range----
UI-- first make provisison for user to provide input fro range of price. 

filter by price range--

i.e from _____to_______ button

in short, this will be a form with 2 i/p fields and a submit button tosubmit it.

Creating form fields--

templates-- product_dashboard.html--


<div class="col-md-12">
  <form action="">
    <table>
        <tr>
          <td>From Rupees : </td>
          <td><input type="text" name="From" class="form-control"></td>
          <td>To Rupees : </td>
          <td><input type="text" name="To" class="form-control"></td>
          <td><input type="Submit" name="send" value="Find"></td>
        </tr>  
            
    </table>
  </form>


</div>

<div class="col-md-4 mt-5">
  <h4>Filter by Category</h4>
  <hr>
  <p><a href="/pdashboard">All</a></p>
  <p><a href="/filter/elec">By Electronics</a></p>
  <p><a href="/filter/groc">By Grocery</a></p>
  <p><a href="/filter/cloths">By Clothes</a></p>
</div>

refreshing dashboard and see--

Making some changes again--

<div class="col-md-12">
  <hr>
  <h4>Filter Between Price Range</h4>
  <hr>
    <form method="POST" action="">
      {% csrf_token %}
              <table>
                  <tr>
                    <td>From Rupees : </td>
                    <td><input type="text" name="from" class="form-control"></td>
                    <td>To Rupees : </td>
                    <td><input type="text" name="to" class="form-control"></td>
                    <td><input type="Submit" name="send" value="Find" class="btn btn-success"></td>
                  </tr>  
                      
              </table>
  <hr>
    </form>


</div>

<div class="col-md-4 mt-5">
  <h4>Filter by Category</h4>
  <hr>


Now, UI is completed.Creating URL for the form.


 <hr>
    <form method="POST" action="prange">---------------action value
      {% csrf_token %}
              <table>
                  <tr>
                    <td>From Rupees : </td>


Now going into dashboard, if we will put some value, lets say 10000 to20000, this
value will go into prange.

So nowgoing into, todoapp--urls.py---and registering url---

    path("sort/<sv>",views.sort),
    path("prange",views.prange),-------------------------------------
]

Now, we will define prange func in views.py----

#prange function
def prange(request):
    if request.method=="POST":
        min=request.POST["from"]
        max=request.POST["to"]
        print(min,max)
        

refresh pdashboard--put values

getting error regarding httpresponse object-- but in terminal we can see 100 200

NOw retrieveing data coming from the forms.
So, now we will write an ORM query to fetch records fromthe database within that price range.

Model.objects.filter(condition)

the condition ehere contains, price>=min and price<=max. Also is_deleted="N"

Records satisfying these 3 conditions will be fetched and send to the dashboard.

So views.py--


#prange function
def prange(request):
    if request.method=="POST":
        min=request.POST["from"]
        max=request.POST["to"]
        #print(min,max)
        q1=Q(price__gte=min)
        q2=Q(price__lte=max)
        q3=Q(is_deleted="N")
        # then we will use these conditions for filter.
        rec=Product.obj1.filter(q1 & q2 & q3)
    content={}
    content['data']=rec
    return render(request,"product_dashboard.html",content)

Refresh pdashboard and see.

On clicking all u will get allthe products.

so,price range filter is completed.

U can use some front end validation if--
1.user tries to enter text in search range---- so,product_dashboard.html---

<tr>
                    <td>From Rupees : </td>
                    <td><input type="number" name="from" class="form-control" required></td>------------type changed,required added
                    <td>To Rupees : </td>
                    <td><input type="number" name="to" class="form-control" required></td>----------------same
                    <td><input type="Submit" name="send" value="Find" class="btn btn-success"></td>
                  </tr>  

Now, if we will try tosubmit blank fields.--- to avoid that-- use required attribute in the front end.The pop up msg will come
if blank field gets submitted.

Form api--

The frameworks helps to develop our application n faster way. Like admin, registeration,etc.

form api is one such thing.It is for readymade forms.

There are 2 ways by which u can create a form in django. By using form api 2nd using modelforms.

using form api--

1.create forms.py file inthe application folder. todoapp->forms.py

So,what we are actually doing is creating a class,inheriting the properties.

2.import forms module from django.i.e.
from django import forms

3.define class inherited from the Form class in the forms module.
class EmpForm(forms.Form):
	data members

data members defined in the EmpForm class are field to be generated in the forms.

now,object of this class we will create in views.py and then we are going to pass
that object to the template. And template is the place where we are going to 
display that form.

from django import forms
class EmpForm(forms.Form):
    #data members defined in this class becomes forms field.
    name=forms.CharField(max_length=50)
    sal=forms.FloatField()
    city=forms.CharField(max_length=20)

Now creating object of this form.py class in views.py

views.py----

from todoapp.forms import EmpForm 

so, when its an empty form its a get request, and filled one is POST req.

#formapi view function
def empform(request):
    if request.method=="POST":
        pass
    else:
        return render(request,"formapi.html")

So,now creating a template. So,inside templates folder.Create file formapi.html

So, here we are not doing any inheritance here for this project purpose. U can always do it.
For the formapi pracical, we donot require it.But we will doit during login and authentication.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form API</title>----------------------------------------------------------
</head>
<body>
    <h2>Using Form API</h2>----------------------------------------------------------
</body>
</html>

Now we want url for this.SO todoapp->urls.py

 path("prange",views.prange),
 path("formapi",views.empform),

http://127.0.0.1:8000/formapi--- o/p-- Using Form API

So now we will goto views.py---

#formapi view function
def empform(request):
    if request.method=="POST":
        pass
    else:
        efm=EmpForm()
        return render(request,"formapi.html",{'form':efm})---- form is a key and efm is a value. Instead of creating content dict, we arepassing it deirectly.


formapi.html---- we are going to access this key.--- without form dict see the page source andthen with dict.

</head>
<body>
    <h2>Using Form API</h2>
    {{form}}
</body>
</html>

http://127.0.0.1:8000/formapi---- refresh--- we are getting fields.

Now,in forms.py-- instead of sal, if we will do-- salary=forms.FloatField(),then in dashboard, instead of sal,salary will be displayed.

by view page source,u can see the coding behind once objects is passed. This coding is given by django.
i.e. django framework helped  us here by generating the code of the form object.


now,after doing page source,we can see,
how we can brring itone below another,
<tr> is there and no table tag is there.
there is no submit button, there is no form tag.

view.py--

    <title>Form API</title>
</head>
<body>
    <h2>Using Form API</h2>
    <table>
        {{form}}
    </table>
</body>
</html>

http://127.0.0.1:8000/formapi-- refresh.
formapi.html---

</head>
<body>
    <h2>Using Form API</h2>
    <form method="POST"> 
        {% csrf_token %}
        <table>
            {{form}}
            <tr>
                <td><input type="submit" value="send"></td>
            </tr>
        </table>
    </form>
</body>
</html>

http://127.0.0.1:8000/formapi-- refresh

Now,since we have not given any action,it
will submit to thesame url. 

So,in views.py , if section---

make changes in dash_product function--

p1=Product.objects.create(name=pname,pdesc=desc,price=price,cat=cat,is_deleted="N")--
-- now here in this func we retrieved the value, created an object and saved the work.
print(p1)



Same thing,we can do in empform--

but here we donot have to retrieve any info,
create any object , only we will have to save.

#formapi view function
def empform(request):
    if request.method=="POST":
        #n=request.POST['name']
        #s=request.POST['salary']
        #c=request.POST['city']
        return HttpResponse("In  the POST Section")
    else:
        efm=EmpForm()
        return render(request,"formapi.html",{'form':efm})


so step4is to import class in the views.py file.
step 5 : create object of that class.
6. pass that object tothe html template

Now,in authorization and authentication ,we are going to repeat this sameprocess here.

Now,using ModelForms---

in models.py we have a product model-- the data members created here are reflected 
as fields only.

So in forms.py only-----

class ProductForm(forms.ModelForm):
    name=forms.CharField(max_length=50)
    pdesc=forms.CharField(max_length=100)
    price=forms.FloatField()

So,we have taken 3 fields.

Now,we are going to create object of ProductForm.
which we will create inside views.py.

Now, in views.py------

from todoapp.forms import EmpForm,ProductForm

Now we willcreate another function-


def productform(request):
    if request.method=="POST":
        pass
    else:
        pfm=ProductForm()
        return render(request,"modelformapi.html",{"mform":pfm})

mform:pfm is an object.

now we will create modelformapi.html---

So in templates--- create--- modelformapi.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modelform API</title>
</head>
<body>
    {{mform}}
</body>
</html>


Now, writing path in urls.py------

  path("formapi",views.empform),
  path("modelform",views.productform),

http://127.0.0.1:8000/modelform-------- value error--modelform has no model class specified. So,

Now,in forms.py---- Now we should must select the model from which we are going tocreate this modelform.

Now,

class ProductForm(forms.ModelForm):
    name=forms.CharField(max_length=50)
    pdesc=forms.CharField(max_length=100)
    price=forms.FloatField()

    class Meta:
        model=Product-------------but this Product is not defined.

from todoapp.models import Product

class ProductForm(forms.ModelForm):
    name=forms.CharField(max_length=50)----------------- these are the fields of the form
    pdesc=forms.CharField(max_length=100)
    price=forms.FloatField()

    class Meta:
        model=Product
        fields=["name","pdesc","price"] ---------------------these are the fields which will be dispalyed

http://127.0.0.1:8000/modelform----------------

Now,  in display,they are on single row,so including table tag--modelformapi.html

</head>
<body>
    <table>
        {{mform}}
    </table>
    
</body>
</html>


http://127.0.0.1:8000/modelform----------------

But this stuff we are doing in both formapi and modelapi,the extra thing done in modelform
is we linked model=Product decribed inside Meta class with forms.ModelForm.
Now,because of this the formis directly linked with the model.And so this has reduced our efforts.
We donot have towrite something like p1=Product.objects.create(....),p1.save(),etc.
 
So just like orm, modelform is mapped.

Now, we have auth_user inbuilt table present in our db.We will use that during login and auth
along with modelform .

Authorization and authentication model--------

In the migration folder..we have 2 files. so 2 migrations we have done i.e.created a tablein dbms.

So, here we will be looking at some tables and their use.

Start apache service or u will be needded to fire cmds. 

See auth_user.All its columns.

Go to settings.py and see , there is Installed_apps section.

Now, auth_permission is related to authorization.

Providing permission touser based on his role.
1. insert into table
2.update
3.view
4.delete 
these permissions need tobe set for eaach and revery
table to restrict the user's actions on particular table.

So, auth permmission has col has user id,
permission name,content type id we will discuss,  codename for the content.

Now, see around 50 rows. Different permissions on product 
are written there.To add the product id is  25,ly ids,26,27 .
These different id number is very imp.
Because these ids are stored in other tables.

andif u see,phpmyadmin-->django_content type--
app_label and models are the perissions.
These are all internal things. So whatever model we create,
that gets addedinto this table.
Now, todoapp_product has id 7.,which is used
in the  auth_permission 

Now,when we give permission to the user, that is given on the 
auth_user_user_permission

Authorization -- 2 types-- singleuser and group permission.

for user permission-- tables or models tolook for are--
1. auth_user,2.auth_permission,3. auth_user_user_permission

now,auth_user_userr is empty.

Those who are doing with workbench,do select * from these tables.

Now we willlogin into admin connection with admin panel.

goon user table.--http://127.0.0.1:8000/admin/auth/user/

Now click on theuser to whomu want to give permission.
Check idf active or not otherwise mk it active.

Scroll down ,come to users permission.

Now,if we login with this firstuser, then it shows,it doesnt 
have any permission.
but if u login as superuser,then u will be able to see different 
permissions/

So in user perm, click on todoapp|product|can view product---click 
on it and move by arrow.

Save the chnages. Once u save it,
u will see the reflectionof the changes,
in auth_user_user_permissions.

Nowin aut_permission,the id for view is 28.

and in aut_user id is 2.

So auth_user_user_perm we will see user id 2 and permission id28.
and normal id is the idof the table,

Now,logout and login as firstuser123.U can view the table.

Now,if u wull click on any product, u r not getting any option to
edit,delete.

Now, logout again. Add an update permission and see the changes.

So now we wil be looking into groups. Sologin as admin.
Goto users. Now why there is a need of group?--its advantageous
when departments arethere.

First removing permissions of firstuser.Save it and create 1 more user.

seconduser123
Pa$$word@20

Now this entry canbe seen in auth_user.
Now we need to create a group first. For each user u will get a group name
populated in this group section.

let's say group name as marketing--permission--view the product,add product.--save

Now goto auth_group--marketing is there.

auth_group_permission_id--- 

open  4 tables--auth_user,auth_user_permission,auth_group-permission,group,user_group

So, we will see how the records are getting inserted with the ids.

So,once i create a group-- the tables that are changing are--

auth_user-no,
auth_group- yes- id 1 name marketing.-- so auth_group maintains entires of the group that are created.
now permission id for view product and add product are--25 and 28
auth_group_permissions--groupid-1 25 28

Now we will add user to a group.So now open auth_user_user_permissions--no permissions becuse we removed.
http://127.0.0.1:8000/admin/auth/user/
now, click on user--- firstuser123---scroll down -- groups is automatically populated with marketing--
now, clik on marketing--choose.

So now,instead of selecting permissions individually,we cn select 1 group and give permission to user.

Now, if we will click save then--2 tables are goingto be affected. authusergroup--user id1 group id 1

aut_user_user_per is for single user permisiions.

Soifwe logout and login as firstuser, we will see add and view product permissions.

So this was about autherizatoin. Now authentication---

User form creation--

Validating whether its an authenticated user or not with the helpof username and pwd stored in db at the time of registration.
It is a process of checking whether user is register or valid user or not.

So before authentication,there is--
1.registration
2.login===>this login is doing the work of authentication.

Now, frameworks areused for faster production.The validation is taken care by framework itself.

1.Registration-- now model form is easy. There is an inbuild registration process.

Now,there is something called as UserCreationForm class,whose object helps u to create user form directly.
So,generally we have user name and pwd and confirm pwd.
 
Now,if u see a company,hr creating an account has admin rights.And they give un and pwd which we can change later.

but a company like fb gives permissions touser to register himself.

so in our pdashboard, we should have another layer of login. 

It is different then our earlier 2 forms since we are using a readymade form and not creating class forour forms.

UserCreationForm class is present inside django.contrib.auth.forms

soauth is an app where we have form.

views.py---

User form creation--15:02

from django.contrib.auth.forms import UserCreationForm

Now creating a function--

rfm-->register form object


def register(request):
    if request.method=="POST":
        pass
    else:
        rfm=UserCreationForm()
        return render(request,'register.html',{'rform':rfm})

templates--new file--register.html---

as we have extended base.html in product.lly,
This is to display.

{% extends "base.html" %}

{% block 'main' %}
    <div class="col-md-12">
        <h1>Registration Form</h1>
    </div>
    <div class="col-md-8">
        {{rform}}
    </div>
{% endblock 'main' %}

todoapp>urls.py

    path("modelform",views.productform),
    path("register",views.register),
]
  

http://127.0.0.1:8000/register-- see the by default form.

Now, adding some style to h1 tag.

u can do the following changes--

{% block 'main' %}
    <div class="col-md-12">
        <h1 class="mt-5 bg-danger text-white text-center">Registration Form</h1>
    </div>
    <div class="col-md-8 mt-3">
        
        <form method="POST" action="">


Now this form has 3 things-- label i.e. username,
input box and kind of msg to put on box.

so 3 data members of UserFormCreation object are--
1.label
2.input field
3.message

Now, u can deal with them seperately.

So, register.html-- using for loop

    <div class="col-md-8 mt-3">
        
        <form method="POST" action="">
            <table>
                {% for x in rform %}
                    <tr>{{x}}</tr>------------ jut to see what x is printing.
                {% endfor %}
            </table>


        </form>
    </div>

for loop is to access each of the 3 things in the registration form individually.

i.e. something like--

label_tag,input_field,error_msg
iterations xis pointing to--
1st iteration->username,,msg1
2nd iteration->password,,msg2
rd iteration->confirm pwd,,msg3

Save everything and refresh and then see.

  <table>
                {% for x in rform %}
                    <tr>
                        <td>{{x}}</td>-------
                    </tr>
                {% endfor %}
            </table>

refresh and see.

   {% for x in rform %}
                    <tr>
                        <td>{{x.label_tag}}</td>
                        <td>{{x}}</td>
                        <td>{{x}}</td>
                    </tr>
                {% endfor %}
            </table>

refresh and see.

     <table>
                {% for x in rform %}
                    <tr>
                        <td>{{x.label_tag}}</td>
                        <td>{{x}}</td>
                        <td>{{x.errors}}</td>------this will be displayed later
                    </tr>
                {% endfor %}
            </table>

---

{% extends "base.html" %}
{% block 'main' %}
    <div class="col-md-12">
        <h1 class="mt-5 bg-danger text-white text-center">Registration Form</h1>
    </div>
    <div class="col-md-8 mt-3">     
        <form method="POST" action="">
            {% csrf_token %}
                <table>
                    {% for x in rform %}
                        <tr>
                            <td>{{x.label_tag}}</td>
                            <td>{{x}}</td>
                            <td>{{x.errors}}</td>
                        </tr>
                    {% endfor %}
                    <tr>
                        <td>   
                            <input type="submit" class="btn btn-primary" value="Register">
                        </td>
                    </tr>
                </table>
        </form>
    </div>
{% endblock 'main' %}


Save and refresh..

Now, lets we want to have first name,last name, email inthe registration form.

For this,we willhave tocreate our own fields,which will be
derived from our userformcreation.

So,UserFormCreation i.e. form objectgives 3 fields.
username
password
confirm password

If there is need tohave email,firstname and lastname in
the registration form, then there is need to create a class
which is derived from UserFormCreation.

So in forms.py---

from django.contrib.auth.forms import UserCreationForm

RegisterForm is derived from UserCreationForm.
Now, since we are going to create a modelform, we
specify the class Meta and there we specify the model.

The model that we are going to specify is user, and user is an inbuilt model
of auth_user.Which is present from before hand only .
We just need to import it.

So for importing user,there is django auth,
From auth only we are going toimport it.

Open auth user in phpmyadmin and see its fields.
Just goto the structure tab in auth_user phpmyadmin--
Then u will see the fields or data members or ORM of the user model.

So,importing user like--forms.py--

from django.contrib.auth.models import User


class RegisterForm(UserCreationForm):
    class Meta:
        model=User
        fields=["username","first_name"]

Now going with views.py----


from todoapp.forms import EmpForm,ProductForm,RegisterForm

This we are doing to show other fields inthe registration form.

Now,in register func,instead of creating UserCreationForm, we 
wil have RegisterForm().


def register(request):
    if request.method=="POST":
        pass
    else:
        #rfm=UserCreationForm()
        rfm=RegisterForm()--------------
        return render(request,'register.html',{'rform':rfm})


http://127.0.0.1:8000/register-------------- refresh and u will see first_name added.

Now on fields add lastname and email in forms.py--

class Meta:
        model=User
        fields=["username","first_name","last_name","email"]

http://127.0.0.1:8000/register--- refresh--- dothe view page source and 
see the keys where informationis stored, like username,first_name,last_name,password1,
password2, etc. So,

views.py---

def register(request):
    if request.method=="POST":
        uname=request.POST["username"]
        print(uname)
    else:
        #rfm=UserCreationForm()
        rfm=RegisterForm()
        return render(request,'register.html',{'rform':rfm})

Now,in the dashboard-- fill username and pwd info.Like,
username--thirduser123
pwd-redhat123@
confirm pwd- redhat123@

No,need of retrieveing like this. Because this is an old method which we use to do.
The data will be an object which we will be retrieving.

fmdata is formdata.


def register(request):
    if request.method=="POST":
        #uname=request.POST["username"]
        #print(uname)
        fmdata=RegisterForm(request.POST)
        print(fmdata)
    else:

http://127.0.0.1:8000/register------------------ register with all the values and then see the html source code.

login-register--8:00----

Now we got value attributes . Previously we used to fetch the data and we used tohave create cmd.
And then save.Now there is no need for that.

Now we will do some kind of validation before saving the data.That is form data isvalid or not.

views.py-- 
if fmdata.is_valid():-- if this true that means filled data is valid.

def register(request):
    if request.method=="POST":
        #uname=request.POST["username"]
        #print(uname)
        fmdata=RegisterForm(request.POST)
        #print(fmdata)
        if fmdata.is_valid():
            fmdata.save()
            return HttpResponse("User registered successfully")
	else:
            return HttpResponse("User not registered successfully")

    else:
        #rfm=UserCreationForm()
        rfm=RegisterForm()
        return render(request,'register.html',{'rform':rfm})












 






























 
















































 